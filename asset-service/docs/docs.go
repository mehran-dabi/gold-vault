// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/asset-price/get-step": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the current step value used for price changes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Asset Price"
                ],
                "summary": "Get price change step",
                "responses": {
                    "200": {
                        "description": "The current price change step",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/admin/asset-price/set-step": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets the step value for price changes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Asset Price"
                ],
                "summary": "Set price change step",
                "parameters": [
                    {
                        "description": "Set price change step",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SetPriceChangeStep"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message indicating the price change step was set",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/admin/asset-price/{asset_type}/adjust-by-step": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the price of an asset by a predefined step for the specified asset type.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Asset Price"
                ],
                "summary": "Update asset price by step",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset type",
                        "name": "assetType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message indicating the price was updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid asset type or missing parameters",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/admin/asset-prices": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds or updates the price of a specific asset for admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Asset Prices"
                ],
                "summary": "Upsert asset price",
                "parameters": [
                    {
                        "description": "Upsert asset price request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpsertAssetPrice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price upserted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/admin/asset-prices/{assetType}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the price of a specific asset for admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Asset Prices"
                ],
                "summary": "Delete asset price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset Type",
                        "name": "assetType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid asset ID",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Asset price not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/asset-prices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the latest prices for all available assets.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asset Prices"
                ],
                "summary": "Get all asset prices",
                "responses": {
                    "200": {
                        "description": "Latest prices for all assets retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/entity.PriceDetails"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/asset-prices/{assetType}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the latest price for a specific asset type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asset Prices"
                ],
                "summary": "Get latest asset price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset type (e.g., gold, silver)",
                        "name": "assetType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest price retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number"
                            }
                        }
                    },
                    "400": {
                        "description": "Asset type is required or invalid input",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Asset not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/price-history/{assetType}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the price history for a specific asset type with optional pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asset Price History"
                ],
                "summary": "Get asset price history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset type (e.g., gold, silver)",
                        "name": "assetType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of results (default is 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default is 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price history retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/entity.PriceHistory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid limit or offset",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Asset price history not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/serr.ErrorCode"
                },
                "message": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "dto.SetPriceChangeStep": {
            "type": "object",
            "required": [
                "step"
            ],
            "properties": {
                "step": {
                    "type": "number"
                }
            }
        },
        "dto.UpsertAssetPrice": {
            "type": "object",
            "required": [
                "asset_type",
                "buy_price",
                "sell_price"
            ],
            "properties": {
                "asset_type": {
                    "type": "string"
                },
                "buy_price": {
                    "type": "number"
                },
                "sell_price": {
                    "type": "number"
                }
            }
        },
        "entity.AssetType": {
            "type": "string",
            "enum": [
                "mesghal",
                "sekke",
                "sekke_bahar",
                "nim_sekke",
                "rob",
                "gerami",
                "other",
                "pose",
                "nim_under_80_to_85",
                "rob_under_80_to_85",
                "parsian_100",
                "parsian_200",
                "parsian_300",
                "parsian_400",
                "parsian_500",
                "parsian_600",
                "parsian_700",
                "parsian_800",
                "parsian_900",
                "parsian_1000",
                "IRR"
            ],
            "x-enum-varnames": [
                "AssetTypeMesghal",
                "AssetTypeSekke",
                "AssetTypeSekkeBahar",
                "AssetTypeNimSekke",
                "AssetTypeRob",
                "AssetTypeGerami",
                "AssetTypeOther",
                "AssetTypePose",
                "AssetTypeNimUnder80To85",
                "AssetTypeRobUnder80To85",
                "AssetTypeParsian100",
                "AssetTypeParsian200",
                "AssetTypeParsian300",
                "AssetTypeParsian400",
                "AssetTypeParsian500",
                "AssetTypeParsian600",
                "AssetTypeParsian700",
                "AssetTypeParsian800",
                "AssetTypeParsian900",
                "AssetTypeParsian1000",
                "AssetTypeIRR"
            ]
        },
        "entity.PriceDetails": {
            "type": "object",
            "properties": {
                "buyPrice": {
                    "type": "number"
                },
                "sellPrice": {
                    "type": "number"
                }
            }
        },
        "entity.PriceHistory": {
            "type": "object",
            "properties": {
                "assetType": {
                    "$ref": "#/definitions/entity.AssetType"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "prices": {
                    "$ref": "#/definitions/entity.PriceDetails"
                }
            }
        },
        "serr.ErrorCode": {
            "type": "string",
            "enum": [
                "INTERNAL",
                "REACH_LIMIT",
                "INVALID_USER",
                "INVALID_TIME",
                "INVALID_INPUT",
                "INVALID_OTP"
            ],
            "x-enum-varnames": [
                "ErrInternal",
                "ErrReachLimit",
                "ErrInvalidUser",
                "ErrInvalidTime",
                "ErrInvalidInput",
                "ErrInvalidOTP"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
